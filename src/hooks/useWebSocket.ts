import { useState, useEffect, useRef, useCallback } from 'react';
import toast from 'react-hot-toast';

interface WebSocketMessage {
  type: string;
  data: any;
  timestamp: number;
}

interface StatsData {
  goods: number;
  bads: number;
  errors: number;
  offline: number;
  ipblock: number;
  processed: number;
  rps: number;
  avg_rps: number;
  peak_rps: number;
  threads: number;
  uptime: number;
  success_rate: number;
}

interface ServerInfo {
  ip: string;
  status: string;
  uptime: string;
  cpu: number;
  memory: number;
  disk: number;
  speed: string;
  processed: number;
  goods: number;
  bads: number;
  errors: number;
  progress: number;
  current_task: string;
}

export function useWebSocket(url?: string) {
  const [isConnected, setIsConnected] = useState(false);
  const [stats, setStats] = useState<StatsData | null>(null);
  const [servers, setServers] = useState<ServerInfo[]>([]);
  const [logs, setLogs] = useState<string[]>([]);
  const [error, setError] = useState<string | null>(null);
  
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();
  const reconnectAttempts = useRef(0);
  const maxReconnectAttempts = 3; // –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
  const isConnecting = useRef(false);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è WebSocket
  const getWebSocketUrl = useCallback(() => {
    if (url) return url;
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL
    const currentHost = window.location.host;
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    
    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (currentHost.includes('localhost') || currentHost.includes('127.0.0.1')) {
      return 'ws://localhost:8080/ws';
    }
    
    // –î–ª—è WebContainer (StackBlitz)
    if (currentHost.includes('webcontainer-api.io')) {
      const baseUrl = currentHost.replace(/:\d+/, '');
      return `${protocol}//${baseUrl}:8080/ws`;
    }
    
    // Fallback
    return `${protocol}//${currentHost.replace(/:\d+/, '')}:8080/ws`;
  }, [url]);

  const connect = useCallback(() => {
    if (isConnecting.current || (wsRef.current && wsRef.current.readyState === WebSocket.CONNECTING)) {
      return;
    }

    const wsUrl = getWebSocketUrl();
    console.log('üîå Attempting WebSocket connection to:', wsUrl);
    
    try {
      isConnecting.current = true;
      wsRef.current = new WebSocket(wsUrl);
      
      wsRef.current.onopen = () => {
        setIsConnected(true);
        setError(null);
        reconnectAttempts.current = 0;
        isConnecting.current = false;
        console.log('üîå WebSocket connected successfully');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        if (reconnectAttempts.current > 0) {
          toast.success('Reconnected to server');
        }
      };
      
      wsRef.current.onmessage = (event) => {
        try {
          const message: WebSocketMessage = JSON.parse(event.data);
          handleMessage(message);
        } catch (err) {
          console.error('Failed to parse WebSocket message:', err);
        }
      };
      
      wsRef.current.onclose = (event) => {
        setIsConnected(false);
        isConnecting.current = false;
        console.log('üîå WebSocket disconnected:', event.code, event.reason);
        
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        if (reconnectAttempts.current > 0) {
          setError('Connection lost');
        }
        
        // Auto-reconnect —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {
          const delay = Math.min(Math.pow(2, reconnectAttempts.current) * 1000, 10000);
          console.log(`üîå Reconnecting in ${delay}ms (attempt ${reconnectAttempts.current + 1}/${maxReconnectAttempts})`);
          
          reconnectTimeoutRef.current = setTimeout(() => {
            reconnectAttempts.current++;
            connect();
          }, delay);
        } else if (reconnectAttempts.current >= maxReconnectAttempts) {
          setError('Failed to connect to server. Please check if the Go server is running on port 8080.');
        }
      };
      
      wsRef.current.onerror = (err) => {
        isConnecting.current = false;
        console.error('üîå WebSocket error:', err);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (reconnectAttempts.current === 0) {
          setError('Server not available. Make sure the Go server is running.');
        }
      };
    } catch (err) {
      isConnecting.current = false;
      console.error('üîå WebSocket creation error:', err);
      setError('Failed to create WebSocket connection');
    }
  }, [getWebSocketUrl]);

  const handleMessage = (message: WebSocketMessage) => {
    try {
      switch (message.type) {
        case 'initial_stats':
        case 'stats_update':
          setStats(message.data as StatsData);
          break;
          
        case 'server_info':
          setServers(message.data as ServerInfo[]);
          break;
          
        case 'logs_data':
          setLogs(message.data as string[]);
          break;
          
        case 'scanner_started':
          console.log('üöÄ Scanner started:', message.data);
          toast.success(`Scanner started: ${message.data.vpn_type || 'Unknown'}`);
          break;
          
        case 'scanner_stopped':
          console.log('üõë Scanner stopped:', message.data);
          toast.success(`Scanner stopped: ${message.data.vpn_type || 'Unknown'}`);
          break;
          
        case 'scanner_command':
          console.log('üì° Scanner command:', message.data);
          break;
          
        case 'config_update':
          console.log('‚öôÔ∏è Config updated:', message.data);
          toast.success('Configuration updated');
          break;
          
        case 'error':
          console.error('Server error:', message.data);
          toast.error(message.data.message || 'Server error occurred');
          break;
          
        default:
          console.log('üì® Unknown message type:', message.type, message.data);
      }
    } catch (err) {
      console.error('Error handling message:', err);
    }
  };

  useEffect(() => {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    const timer = setTimeout(() => {
      connect();
    }, 1000);
    
    return () => {
      clearTimeout(timer);
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
      if (wsRef.current) {
        wsRef.current.close(1000); // –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
      }
    };
  }, [connect]);

  const sendMessage = useCallback((type: string, data: any) => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      try {
        const message: WebSocketMessage = {
          type,
          data,
          timestamp: Date.now()
        };
        wsRef.current.send(JSON.stringify(message));
        return true;
      } catch (err) {
        console.error('Failed to send message:', err);
        toast.error('Failed to send command to server');
        return false;
      }
    } else {
      console.warn('üîå WebSocket not connected, cannot send message');
      toast.error('Not connected to server');
      return false;
    }
  }, []);

  const startScanner = useCallback((vpnType: string) => {
    return sendMessage('start_scanner', { vpn_type: vpnType });
  }, [sendMessage]);

  const stopScanner = useCallback((vpnType: string) => {
    return sendMessage('stop_scanner', { vpn_type: vpnType });
  }, [sendMessage]);

  const getLogs = useCallback(() => {
    return sendMessage('get_logs', {});
  }, [sendMessage]);

  return {
    isConnected,
    stats,
    servers,
    logs,
    error,
    sendMessage,
    startScanner,
    stopScanner,
    getLogs
  };
}