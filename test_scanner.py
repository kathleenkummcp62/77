#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–∞–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ VPN —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import json
import time
import random
import argparse
from pathlib import Path

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="VPN Scanner Simulator")
parser.add_argument("--vpn-type", default="fortinet", help="–¢–∏–ø VPN (fortinet, paloalto, sonicwall, sophos, watchguard, cisco)")
parser.add_argument("--creds-file", help="–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
parser.add_argument("--output", default="valid.txt", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
args = parser.parse_args()

# –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
creds_file = args.creds_file
if not creds_file:
    creds_file = f"creds/{args.vpn_type}.txt"

if not os.path.exists(creds_file):
    print(f"–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {creds_file}")
    sys.exit(1)

with open(creds_file, "r") as f:
    credentials = [line.strip() for line in f if line.strip() and not line.startswith("#")]

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats = {
    "goods": 0,
    "bads": 0,
    "errors": 0,
    "offline": 0,
    "ipblock": 0,
    "processed": 0,
    "rps": 0
}

# –§–∞–π–ª –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
stats_file = f"stats_{os.getpid()}.json"

# –ò–º–∏—Ç–∞—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ {args.vpn_type.upper()}")
print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(credentials)} —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

valid_file = open(args.output, "a")

try:
    start_time = time.time()
    for i, cred in enumerate(credentials):
        # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        time.sleep(random.uniform(0.1, 0.5))
        
        # –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        result = random.choices(
            ["valid", "invalid", "error", "offline", "ipblock"],
            weights=[0.1, 0.7, 0.1, 0.05, 0.05],
            k=1
        )[0]
        
        if result == "valid":
            stats["goods"] += 1
            valid_file.write(f"{cred}\n")
            valid_file.flush()
            print(f"‚úÖ VALID: {cred}")
        elif result == "invalid":
            stats["bads"] += 1
        elif result == "error":
            stats["errors"] += 1
            print(f"‚ùå ERROR: {cred}")
        elif result == "offline":
            stats["offline"] += 1
            print(f"‚è∞ TIMEOUT: {cred}")
        elif result == "ipblock":
            stats["ipblock"] += 1
            print(f"üö´ BLOCKED: {cred}")
        
        stats["processed"] += 1
        stats["rps"] = stats["processed"] / (time.time() - start_time)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if i % 5 == 0:
            with open(stats_file, "w") as f:
                json.dump(stats, f)
            
            # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            elapsed = time.time() - start_time
            print(f"\rüî• G:{stats['goods']} B:{stats['bads']} E:{stats['errors']} Off:{stats['offline']} Blk:{stats['ipblock']} | ‚ö°{stats['rps']:.1f}/s | ‚è±Ô∏è{int(elapsed)}s", end="")
    
    print("\n‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

except KeyboardInterrupt:
    print("\nüõë –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
finally:
    valid_file.close()
    with open(stats_file, "w") as f:
        json.dump(stats, f)