#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH-–≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è VPN —Å–∫–∞–Ω–µ—Ä–∞
"""

import os
import sys
import json
import time
import paramiko
import argparse
from pathlib import Path

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="Setup SSH Workers")
parser.add_argument("--credentials", default="credentials.txt", help="–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ SSH")
parser.add_argument("--test-only", action="store_true", help="–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
parser.add_argument("--verbose", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
args = parser.parse_args()

def parse_credentials(filename):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    credentials = []
    try:
        with open(filename, "r") as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith("#"):
                    continue
                
                parts = line.split(";")
                if len(parts) != 3:
                    print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}")
                    continue
                
                ip, username, password = parts
                credentials.append((ip, username, password))
        
        return credentials
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return []

def test_ssh_connection(ip, username, password):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ SSH-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(ip, username=username, password=password, timeout=10)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É
        stdin, stdout, stderr = client.exec_command("uname -a")
        output = stdout.read().decode().strip()
        
        client.close()
        return True, output
    except Exception as e:
        return False, str(e)

def setup_worker(ip, username, password):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH-–≤–æ—Ä–∫–µ—Ä–∞"""
    print(f"\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ {ip}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    success, output = test_ssh_connection(ip, username, password)
    if not success:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {ip}: {output}")
        return False
    
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {ip} —É—Å–ø–µ—à–Ω–æ")
    print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ: {output}")
    
    if args.test_only:
        return True
    
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(ip, username=username, password=password, timeout=10)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–∞ {ip}")
        commands = [
            "mkdir -p /root/NAM/Check",
            "mkdir -p /root/NAM/Servis",
            "mkdir -p /root/NAM/Config"
        ]
        
        for cmd in commands:
            if args.verbose:
                print(f"$ {cmd}")
            stdin, stdout, stderr = client.exec_command(cmd)
            exit_status = stdout.channel.recv_exit_status()
            if exit_status != 0:
                error = stderr.read().decode().strip()
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {cmd}: {error}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ {ip}")
        
        sftp = client.open_sftp()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º config.txt
        config_content = "threads = 2500\n"
        with sftp.file("/root/NAM/Servis/config.txt", "w") as f:
            f.write(config_content)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º proxy_config.txt (–ø—É—Å—Ç–æ–π —Ñ–∞–π–ª)
        with sftp.file("/root/NAM/Servis/proxy_config.txt", "w") as f:
            f.write("")
        
        sftp.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Python –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        print(f"üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –Ω–∞ {ip}")
        stdin, stdout, stderr = client.exec_command("python3 --version")
        python_version = stdout.read().decode().strip()
        
        if not python_version:
            print(f"‚ö†Ô∏è Python –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ {ip}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python
            print(f"üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –Ω–∞ {ip}")
            stdin, stdout, stderr = client.exec_command("apt-get update && apt-get install -y python3 python3-pip")
            exit_status = stdout.channel.recv_exit_status()
            
            if exit_status != 0:
                error = stderr.read().decode().strip()
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python: {error}")
                client.close()
                return False
        else:
            print(f"‚úÖ {python_version} –Ω–∞–π–¥–µ–Ω –Ω–∞ {ip}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
        print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ {ip}")
        stdin, stdout, stderr = client.exec_command("pip3 install --break-system-packages aiohttp aiofiles")
        exit_status = stdout.channel.recv_exit_status()
        
        if exit_status != 0:
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ --break-system-packages
            stdin, stdout, stderr = client.exec_command("pip3 install aiohttp aiofiles")
            exit_status = stdout.channel.recv_exit_status()
            
            if exit_status != 0:
                error = stderr.read().decode().strip()
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤: {error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        
        client.close()
        print(f"‚úÖ –í–æ—Ä–∫–µ—Ä {ip} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return True
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞ {ip}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH-–≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è VPN —Å–∫–∞–Ω–µ—Ä–∞")
    
    # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    credentials = parse_credentials(args.credentials)
    if not credentials:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return False
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(credentials)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤–æ—Ä–∫–µ—Ä
    results = {}
    for ip, username, password in credentials:
        results[ip] = setup_worker(ip, username, password)
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    success_count = sum(1 for success in results.values() if success)
    for ip, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {ip}")
    
    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ {success_count} –∏–∑ {len(credentials)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
    return success_count == len(credentials)

if __name__ == "__main__":
    try:
        if main():
            print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("\n‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
    except KeyboardInterrupt:
        print("\nüõë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)